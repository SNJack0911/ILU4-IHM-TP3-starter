/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package components;

import event.TimeModelEvent;
import event.TimeModelListener;
import java.awt.BasicStroke;
import model.TimeModel;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.time.LocalDateTime;

/**
 *
 * @author hiraichi
 */
public class JClock extends javax.swing.JPanel implements TimeModelListener {

    /**
     * Creates new form JClock
     */
    public JClock() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 624, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    int wid = getWidth();
    int hei = getHeight();
    Point center =new Point(wid/2, hei/2); 
    Point defaultHour = new Point(wid/2,(hei/100)*25);
    Point defaultMinute = new Point(wid/2,(hei/100)*15);
    Point defaultSecond = new Point(wid/2,(hei/100)*10);
    Point ticks = new Point(wid/2,(hei/100)*5);
    LocalDateTime time;
    
    @Override
    protected void paintComponent(Graphics g){
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        drawBackGround(g2d);
        if (time != null){
            drawHour(g2d);
            drawMinute(g2d);
            drawSeconde(g2d);   
        }
    }
    private void drawBackGround(Graphics2D g2d){
        g2d.setColor(Color.LIGHT_GRAY);
        g2d.fillOval(0, 0,wid, hei);
        BasicStroke s = new  BasicStroke(10);
        g2d.setStroke(s);
        for (int i=0; i<12;i++){
            Point tic = rotatePoint(ticks, center, getHourRotation(i));
            g2d.drawLine(tic.x, tic.y, tic.x, tic.y);
        }
    }
    private void drawHour(Graphics2D g2d){
        Point hour = rotatePoint(defaultHour, center,getHourRotation(time.getHour()));
        Line2D line = new Line2D.Double(center, hour);
        BasicStroke s = new  BasicStroke(20);
        g2d.setStroke(s);
        g2d.draw(line);
    }
    private void drawMinute(Graphics2D g2d){
        Point minute = rotatePoint(defaultMinute, center,getMinuteRotation(time.getMinute()));
        Line2D line = new Line2D.Double(center, minute);
        BasicStroke s = new  BasicStroke(10);
        g2d.setStroke(s);
        g2d.draw(line);
    }
    private void drawSeconde(Graphics2D g2d){
        Point seconde = rotatePoint(defaultSecond, center,getSecondsRotation(time.getSecond()));
        Line2D line = new Line2D.Double(center, seconde);
        g2d.setColor(Color.red);
        BasicStroke s = new  BasicStroke(5);
        g2d.setStroke(s);
        g2d.draw(line);
    }
    //retourne le degré de rotation d'une seconde sur l'horloge
    private int getSecondsRotation(int seconds) {
        return (360/60) * seconds;
    }
    //retourne le degré de rotation d'une minute sur l'horloge
    private int getMinuteRotation(int minutes) {
        return (360/60) * minutes;
    }
    //retourne le degré de rotation d'une heure sur l'horloge
    private int getHourRotation(int hours) {
        return (360/12) * hours;
    }
    // retourne un Point point qui a été tourné autour du Point center du nombre dedegrés degree;  
    private Point rotatePoint(Point point, Point center, int degree) {
        AffineTransform rotation = new AffineTransform();
        double angleInRadians = (degree * Math.PI / 180);
        rotation.rotate(angleInRadians, center.getX(), center.getY());
        Point result = new Point();
        rotation.transform(point, result);
        return result;
    }
    @Override
    public void timeChanged(TimeModelEvent evt){
        time =evt.getTime();
        repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
